{
    "Parameters": {
    	"KeyPair" : {
    		"Type": "AWS::EC2::KeyPair::KeyName",
    		"Description": "Key pair name for Bastion Instance"
    	},
    	"RoleArn": {
    		"Type" : "String",
    		"Description" : "RoleArn for Cross Account Access"
    	},
    	"StackName": {
    		"Type" : "String",
    		"Description" : "Stack in the Other Account"
    	}
    },
    
    "Mappings" : {
	    "RegionMap" : {
	      "us-east-1" : {"64":"ami-6869aa05"},
	      "us-west-1" : {"64":"ami-7172b611"},
	      "us-west-2" : {"64":"ami-31490d51"},
	      "eu-west-1" : {"64":"ami-f9dd458a"},
	      "eu-central-1": {"64":"ami-ea26ce85"},
	      "ap-southeast-1" : {"64":"ami-a59b49c6"},
	      "ap-northeast-1" : {"64":"ami-374db956"}
	    }
	},


    "Resources": {
    	"DevInstance": {
    	    "Type": "AWS::EC2::Instance",
    	    "Properties": {
    	        "KeyName": {"Ref" : "KeyPair"},
    	        "ImageId":  {"Fn::FindInMap": ["RegionMap", {"Ref" : "AWS::Region"}, "64"]},
    	        "InstanceType": "t2.micro",
    	        "SecurityGroupIds" : [{"Ref" : "DevInstanceSG"}]
    	        
    		}
    	},

    	"DevInstanceSG" : {
	      "Type" : "AWS::EC2::SecurityGroup",
	      "Properties" : {
	        "GroupDescription" : "Bastion Security Group for ingress",
	        "SecurityGroupIngress" : [ 
	          {
	          	"FromPort" : "22",
	          	"ToPort" : "22",
	          	"IpProtocol" : "tcp",
	          	"CidrIp" : {"Fn::Join":["",[{"Fn::GetAtt": ["AccessStack", "publicIpAddress"]},"/32"]]}
	          }
	        ]
	      }	
	    },

	    "LookupStackOutputs": {
		  "Type": "AWS::Lambda::Function",
		  "Properties": {
		    "Code": {
		      "ZipFile":  { "Fn::Join": ["", [
		        "var response = require('cfn-response');\n",
		        "var aws = require('aws-sdk');\n",
		        "exports.handler = function(event, context) {\n",
		        "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));\n",
		        "    if (event.RequestType == 'Delete') {\n",
		        "        response.send(event, context, response.SUCCESS);\n",
		        "        return;\n",
		        "    }\n",
		        "    var params = {\n",
		        "       RoleArn : '",{"Ref": "RoleArn"},"',\n",
		        "       RoleSessionName : 'ASessionName'\n",
		        "    }\n",
		        "    var responseData = {};\n",
		        "    var sts = new aws.STS();\n",
		        "    role = sts.assumeRole(params, function(err, data){\n",
		        "    if (err) {\n",
		        "       console.log(err, err.stack);\n",
		        "       response.send(event, context, response.FAILED, responseData);\n",
		        "    }else{\n",
		        "        var stackName = event.ResourceProperties.StackName;\n",
		        "        var aki = data.Credentials.AccessKeyId;\n",
		        "        var aks = data.Credentials.SecretAccessKey;\n",
		        "        var stoken = data.Credentials.SessionToken;\n",
		        "        var cfn = new aws.CloudFormation({accessKeyId: aki, secretAccessKey: aks, sessionToken: stoken});\n",
		        "        var params = {\n",
		        "           StackName: stackName,\n",
		        "           LogicalResourceId: 'BastionHost'\n",
		        "        }\n",
		        "        cfn.describeStackResources(params, function(err, data) {\n",
  				"               if (err){ console.log(err, err.stack);\n",
  				"                        response.send(event, context, response.FAILED, responseData);\n",
  				"               }else{\n",
  				"                   var ins = data.StackResources[0]['PhysicalResourceId'];\n",
  				"                   var ec2 = new aws.EC2({accessKeyId: aki, secretAccessKey: aks, sessionToken: stoken});\n",
  				"                   var params = {\n",
  				"                       InstanceIds: [\n",
  				"                            ins\n",
  				"                       ]\n",
  				"                   }\n",
  				"               ec2.describeInstances(params, function(err, data) {\n",
  			    "                   if (err){\n",
  			    "                        console.log(err, err.stack);\n",
  			    "                        response.send(event, context, response.FAILED, responseData);\n",
  			    "                   }else{\n",
  			    "                        console.log(data.Reservations[0].Instances[0]['PublicIpAddress']);\n",
  			    "                        responseData['publicIpAddress'] = data.Reservations[0].Instances[0]['PublicIpAddress'];\n",
  			    "                        response.send(event, context, response.SUCCESS, responseData);\n",
  			    "                   }\n",
  			    "               });\n",
				"            }\n",
				"         });\n",
				"       }\n",
				"    });\n",
		        "};"
		      ]]}
		    },
		    "Handler": "index.handler",
		    "Runtime": "nodejs",
		    "Timeout": "30",
		    "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] }
		  }
		},

		"LambdaExecutionRole": {
		  "Type": "AWS::IAM::Role",
		  "Properties": {
		    "AssumeRolePolicyDocument": {
		      "Version": "2012-10-17",
		      "Statement": [{
		        "Effect": "Allow",
		        "Principal": {"Service": ["lambda.amazonaws.com"]},
		        "Action": ["sts:AssumeRole"]
		      }]
		    },
		    "Path": "/",
		    "Policies": [{
		      "PolicyName": "root",
		      "PolicyDocument": {
		        "Version": "2012-10-17",
		        "Statement": [{
		          "Effect": "Allow",
		          "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
		          "Resource": "arn:aws:logs:*:*:*"
		        },
		        {
		          "Effect": "Allow",
		          "Action": ["sts:AssumeRole"],
		          "Resource": "*"
		        }
		        ]
		      }
		    }]
		  }
		},

		"AccessStack" : {
			"Type" : "Custom::AccessStack",
			"Properties" : {
				"ServiceToken": { "Fn::GetAtt" : ["LookupStackOutputs", "Arn"] },
				"StackName" : {
					"Ref" : "StackName"
				}
			}
		}
    },
    "Outputs":{
    	"Output1": {
    		"Description": "something",
    		"Value": {"Fn::GetAtt": ["AccessStack", "publicIpAddress"]}
    	}
    }
}
    